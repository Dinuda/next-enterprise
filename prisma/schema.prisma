generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  phone          String        @unique
  name           String
  password       String?
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  students       StudentUser[] // Renamed 'users' to 'students'
  emailVerified  Boolean       @default(false)
  otp            OTP?
  sessions       Session[]
  accounts       Account[]
}

model OTP {
  id         String    @id @default(cuid())
  code       String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime
  verifiedAt DateTime?
}

model StudentUser {
  id          String   @id @default(cuid())
  name        String
  country     String
  address     String
  dateOfBirth DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Organization {
  id    String @id @default(cuid())
  name  String
  users User[] // Renamed 'parentUser' to 'users'
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
